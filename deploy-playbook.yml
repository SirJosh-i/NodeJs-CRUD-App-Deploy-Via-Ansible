# deploy-only-playbook.yml
- name: Deploy Application Updates
  hosts: myapp-server
  become: yes
  vars:
    app_directory: "/home/{{ ansible_user }}/project"
    
  tasks:
    # Fix filesystem permissions at start
    - name: Ensure filesystem is writable
      shell: |
        mount -o remount,rw /
        chown -R {{ ansible_user }}:{{ ansible_user }} /home/{{ ansible_user }}
      ignore_errors: yes
      
    - name: Check if systemd-resolved is enabled or has started
      shell: sudo systemctl start systemd-resolved
      ignore_errors: yes
        
    - name: Copy application files from local to remote
      synchronize:
        src: "./app/"
        dest: "{{ app_directory }}/"
        delete: yes
        recursive: yes
        private_key: /home/runner/.ssh/id_ed25519
        ssh_connection_multiplexing: false
      delegate_to: localhost

    - name: Copy .env.example to config directory
      copy:
        src: "{{ app_directory }}/.env.example"
        dest: /home/{{ ansible_user }}/config/.env
        remote_src: yes 
        backup: yes

    - name: Check if Docker is installed
      shell: docker --version
      register: docker_check
      ignore_errors: yes

    - name: Copy Docker install script
      copy:
        src: basic_install.sh
        dest: /tmp/basic_install.sh
        mode: '0755'
      when: docker_check.rc != 0

    - name: Execute Docker install script
      shell: /tmp/basic_install.sh
      when: docker_check.rc != 0

    - name: Start and enable Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Install nginx
      apt:
        name: nginx
        state: present
        update_cache: yes
      ignore_errors: yes

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Copy Nginx configuration
      copy:
        src: ./app.conf
        dest: /etc/nginx/sites-available/app.conf
        backup: yes

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/app.conf
        dest: /etc/nginx/sites-enabled/app.conf
        state: link

    - name: Test Nginx configuration
      shell: nginx -t
      register: nginx_test
      failed_when: nginx_test.rc != 0 # Fail when the return code is not 0 - Any other than zero indicates an error
      notify: restart nginx


    - name: Show Nginx test result
      debug:
        var: nginx_test.stdout_lines

    - name: Check if app containers are running
      shell: docker ps --filter "name=db" --filter "name=app"
      register: app_containers
      become_user: "{{ ansible_user }}"
      ignore_errors: yes # This will not fail the playbook if no containers are found

    - name: Stop existing containers if running
      shell: docker compose down
      args:
        chdir: "{{ app_directory }}"
      ignore_errors: yes
      when: app_containers.stdout != ""

    - name: Start Docker containers
      shell: docker compose up --build -d
      args:
        chdir: "{{ app_directory }}"
      register: docker_start_result

    - name: Show Docker start result
      debug:
        var: docker_start_result.stdout_lines

    - name: Wait for containers to be ready
      shell: docker compose ps
      args:
        chdir: "{{ app_directory }}"
      register: container_status
      until: "'Up' in container_status.stdout"
      retries: 5
      delay: 30 

    - name: Wait for database port
      wait_for:
        host: localhost
        port: 5432
        delay: 20
        timeout: 30
      ignore_errors: yes

    - name: Verify containers are running
      shell: docker ps
      register: final_containers

    - name: Show running containers
      debug:
        var: final_containers.stdout_lines

    - name: Create database table
      shell: |
        docker exec -i db psql -U {{pg_username}} -d myapp -c "CREATE TABLE IF NOT EXISTS users (id SERIAL PRIMARY KEY, name VARCHAR(100), email VARCHAR(255) UNIQUE);"
      register: db_result
      until: db_result.rc == 0
      retries: 5
      delay: 10
      ignore_errors: yes

    - name: Show database result
      debug:
        var: db_result
      when: db_result is defined

    - name: Wait before verification
      pause:
        seconds: 50

    - name: Verify deployment
      uri:
        url: "http://app.joshisiris.com.np"
        method: GET
        status_code: 200
        timeout: 30
      delegate_to: localhost
      register: deployment_check
      retries: 5
      delay: 30

    - name: Show deployment verification result
      debug:
        var: deployment_check.status

  handlers:
    - name: restart nginx
      command: systemctl restart nginx
