const express = require("express");
const bodyParser = require("body-parser");
const db = require("./db/db");

const app = express();
app.use(bodyParser.json());

// Add request logging middleware
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
  if (req.body && Object.keys(req.body).length > 0) {
    console.log('Request body:', req.body);
  }
  next();
});

// Health check endpoint
app.get("/", (req, res) => {
  res.json({ 
    message: "CRUD API is running",
    endpoints: {
      "GET /users": "Get all users",
      "GET /users/:id": "Get user by ID",
      "POST /users": "Create new user",
      "PUT /users/:id": "Update user by ID",
      "DELETE /users/:id": "Delete user by ID",
      "GET /debug/table": "Check table structure"
    }
  });
});

// CREATE - Add new user
app.post("/users", async (req, res) => {
  try {
    console.log('Creating new user...');
    const { name, email } = req.body;
    
    // Validate required fields
    if (!name) {
      return res.status(400).json({ 
        error: "Name is required",
        received: req.body 
      });
    }
    
    // Insert user with optional email
    const result = await db.query(
      "INSERT INTO users (name, email) VALUES ($1, $2) RETURNING *",
      [name, email || null]
    );
    
    console.log('User created successfully:', result.rows[0]);
    res.status(201).json({
      message: "User created successfully",
      user: result.rows[0]
    });
    
  } catch (error) {
    console.error('Error creating user:', error);
    
    // Handle specific PostgreSQL errors
    if (error.code === '42703') {
      res.status(500).json({ 
        error: "Database schema error",
        message: "Column does not exist. Check your table structure.",
        hint: "Visit /debug/table to see current table structure"
      });
    } else if (error.code === '42P01') {
      res.status(500).json({ 
        error: "Table does not exist",
        message: "Users table not found",
        hint: "Create the users table first"
      });
    } else if (error.code === '23505') {
      res.status(409).json({ 
        error: "Duplicate entry",
        message: "User with this email already exists"
      });
    } else {
      res.status(500).json({ 
        error: "Database error",
        message: error.message
      });
    }
  }
});

// READ - Get all users
app.get("/users", async (req, res) => {
  try {
    console.log('Fetching all users...');
    const result = await db.query("SELECT * FROM users ORDER BY id");
    
    console.log(`Found ${result.rows.length} users`);
    res.json({
      message: "Users retrieved successfully",
      count: result.rows.length,
      users: result.rows
    });
    
  } catch (error) {
    console.error('Error fetching users:', error);
    res.status(500).json({ 
      error: "Failed to fetch users",
      message: error.message 
    });
  }
});

// READ - Get user by ID
app.get("/users/:id", async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`Fetching user with ID: ${id}`);
    
    // Validate ID is a number
    if (isNaN(id)) {
      return res.status(400).json({ 
        error: "Invalid user ID",
        message: "ID must be a number"
      });
    }
    
    const result = await db.query("SELECT * FROM users WHERE id = $1", [id]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ 
        error: "User not found",
        message: `No user found with ID ${id}`
      });
    }
    
    console.log('User found:', result.rows[0]);
    res.json({
      message: "User retrieved successfully",
      user: result.rows[0]
    });
    
  } catch (error) {
    console.error('Error fetching user:', error);
    res.status(500).json({ 
      error: "Failed to fetch user",
      message: error.message 
    });
  }
});

// UPDATE - Update user by ID
app.put("/users/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const { name, email } = req.body;
    
    console.log(`Updating user with ID: ${id}`);
    
    // Validate ID is a number
    if (isNaN(id)) {
      return res.status(400).json({ 
        error: "Invalid user ID",
        message: "ID must be a number"
      });
    }
    
    // Validate required fields
    if (!name) {
      return res.status(400).json({ 
        error: "Name is required",
        received: req.body 
      });
    }
    
    // Check if user exists first
    const existingUser = await db.query("SELECT * FROM users WHERE id = $1", [id]);
    if (existingUser.rows.length === 0) {
      return res.status(404).json({ 
        error: "User not found",
        message: `No user found with ID ${id}`
      });
    }
    
    // Update user
    const result = await db.query(
      "UPDATE users SET name = $1, email = $2 WHERE id = $3 RETURNING *",
      [name, email || null, id]
    );
    
    console.log('User updated successfully:', result.rows[0]);
    res.json({
      message: "User updated successfully",
      user: result.rows[0]
    });
    
  } catch (error) {
    console.error('Error updating user:', error);
    
    if (error.code === '23505') {
      res.status(409).json({ 
        error: "Duplicate entry",
        message: "User with this email already exists"
      });
    } else {
      res.status(500).json({ 
        error: "Failed to update user",
        message: error.message 
      });
    }
  }
});

// DELETE - Delete user by ID
app.delete("/users/:id", async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`Deleting user with ID: ${id}`);
    
    // Validate ID is a number
    if (isNaN(id)) {
      return res.status(400).json({ 
        error: "Invalid user ID",
        message: "ID must be a number"
      });
    }
    
    // Check if user exists first
    const existingUser = await db.query("SELECT * FROM users WHERE id = $1", [id]);
    if (existingUser.rows.length === 0) {
      return res.status(404).json({ 
        error: "User not found",
        message: `No user found with ID ${id}`
      });
    }
    
    // Delete user
    await db.query("DELETE FROM users WHERE id = $1", [id]);
    
    console.log(`User with ID ${id} deleted successfully`);
    res.json({ 
      message: "User deleted successfully",
      deletedUser: existingUser.rows[0]
    });
    
  } catch (error) {
    console.error('Error deleting user:', error);
    res.status(500).json({ 
      error: "Failed to delete user",
      message: error.message 
    });
  }
});

// DEBUG - Check table structure
app.get("/debug/table", async (req, res) => {
  try {
    console.log('Checking table structure...');
    
    // Check if table exists
    const tableExists = await db.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'users'
      )
    `);
    
    // Get table structure
    const columns = await db.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'users'
      ORDER BY ordinal_position
    `);
    
    let rowCount = 0;
    let sampleData = [];
    
    if (tableExists.rows[0].exists) {
      const countResult = await db.query("SELECT COUNT(*) FROM users");
      rowCount = parseInt(countResult.rows[0].count);
      
      // Get sample data
      const sampleResult = await db.query("SELECT * FROM users LIMIT 3");
      sampleData = sampleResult.rows;
    }
    
    res.json({
      tableExists: tableExists.rows[0].exists,
      columns: columns.rows,
      rowCount: rowCount,
      sampleData: sampleData,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('Error checking table structure:', error);
    res.status(500).json({ 
      error: "Failed to check table structure",
      message: error.message 
    });
  }
});

// Global error handler
app.use((error, req, res, next) => {
  console.error('Unhandled error:', error);
  res.status(500).json({
    error: "Internal server error",
    message: error.message
  });
});

// Handle 404 for undefined routes
app.use((req, res) => {
  res.status(404).json({
    error: "Route not found",
    message: `Cannot ${req.method} ${req.url}`,
    availableRoutes: [
      "GET /",
      "GET /users",
      "GET /users/:id",
      "POST /users",
      "PUT /users/:id",
      "DELETE /users/:id",
      "GET /debug/table"
    ]
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`CRUD API running on http://0.0.0.0:${PORT}`);
  console.log('Available endpoints:');
  console.log('- GET /users (get all users)');
  console.log('- GET /users/:id (get user by ID)');
  console.log('- POST /users (create user)');
  console.log('- PUT /users/:id (update user)');
  console.log('- DELETE /users/:id (delete user)');
  console.log('- GET /debug/table (check table structure)');
});